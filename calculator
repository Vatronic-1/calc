This is analysis of various functions and features used in the development of a calculator in the following repo.
  https://github.com/hjsong-pknu/calculator
  
main()
This is the entry point of the program. It reads an infix expression from the user, converts it to postfix notation, evaluates the postfix expression, and then prints the result.
Functionality:
Input Reading:
Uses fgets() to read an input expression from the user.
Conversion and Evaluation:
Calls toPostfix() to convert the infix expression to postfix notation.
Calls evaluate() to evaluate the postfix expression and prints the result.
Variables:
input: Buffer to store the user input expression.
Converts an infix expression to a postfix expression using the Shunting Yard algorithm.

infix: Pointer to the input infix expression string.
postfix: Pointer to the output buffer where the postfix expression will be stored.
Functionality:

Initialization:
Creates a stack to hold operators.
Initializes an empty postfix buffer.
Token Processing:
Reads tokens from the infix expression using GetNextToken().
If the token is an operand, it is added to the postfix expression.
If the token is an operator, it handles precedence and parentheses using the operator stack.
Final Output:
Outputs any remaining operators from the stack to the postfix expression.
Checks for mismatched parentheses.
Variables:
create_stack()
Purpose:

Initializes a new stack with a specified initial size.
Parameters:

initial_size: The initial number of items the stack can hold.
Functionality:

Allocates memory for the stack structure and its contents.
Sets the initial values for top (0) and size.
Returns:

A pointer to the newly created stack.
make_empty()
Purpose:

Resets the stack, making it empty.
Parameters:

stack: A pointer to the stack to be emptied.
Functionality:

Sets the top index to 0, effectively removing all items from the stack.
is_empty()
Purpose:

Checks if the stack is empty.
Parameters:

stack: A pointer to the stack to be checked.
Returns:

true if the stack is empty (top == 0).
false otherwise.
is_full()
Purpose:

Checks if the stack is full.
Parameters:

stack: A pointer to the stack to be checked.
Returns:

Always returns false. (This function is incomplete and does not actually check if the stack is full.)
push()
Purpose:

Adds an item to the top of the stack.
Parameters:

stack: A pointer to the stack.
i: The item to be added to the stack.
Functionality:

Checks if there is space in the stack. If not, it calls reallocate() to increase the stack size.
Adds the item to the stack and increments the top index.
Prints a message indicating the pushed item.
pop()
Purpose:

Removes and returns the item at the top of the stack.
Parameters:

stack: A pointer to the stack.
Returns:

The item at the top of the stack if the stack is not empty.
Calls stack_underflow() and exits if the stack is empty.
Functionality:

Checks if the stack is empty. If so, calls stack_underflow().
Prints a message indicating the popped item.
Returns the item at the top and decrements the top index.
peek()
Purpose:

Retrieves the item at the top of the stack without removing it.
Parameters:

stack: A pointer to the stack.
Returns:

The item at the top of the stack if the stack is not empty.
Calls stack_underflow() if the stack is empty.
stack_overflow()
Purpose:

Handles stack overflow situations.
Functionality:

Prints an error message and exits the program if the stack cannot accommodate more items.
stack_underflow()
Purpose:

Handles stack underflow situations.

